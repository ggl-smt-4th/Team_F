pragma solidity ^0.4.14;
 
import './SafeMath.sol';

 contract Payroll {
 
     struct Employee {
@@ -20,14 +22,14 @@ contract Payroll {
         totalSalary = 0;
     }
 
    modifier validSalary(int salary) {
        require (salary >= 0);
    modifier validSalary(uint salary) {
        SafeMath.mul(salary, 1 ether);
         _;
     }
 
    function addEmployee(address employeeAddress, int salary) public validSalary(salary) ownerOnly {
    function addEmployee(address employeeAddress, uint salary) public validSalary(salary) ownerOnly {
 
        uint salaryInEther = uint(salary) * 1 ether;
        uint salaryInEther = SafeMath.mul(uint(salary), 1 ether);
         employees[employeeAddress] = Employee(employeeAddress, salaryInEther, now);
 
         totalSalary += salaryInEther;
@@ -68,12 +70,12 @@ contract Payroll {
         _;
     }
 
    function updateEmployee(address employeeAddress, int salary) public validSalary(salary) ownerOnly employeeExist
    function updateEmployee(address employeeAddress, uint salary) public validSalary(salary) ownerOnly employeeExist
     (employeeAddress) {
 
         Employee employee = employees[employeeAddress];
 
        uint salaryInETH = uint(salary) * 1 ether;
        uint salaryInETH = SafeMath.mul(uint(salary), 1 ether);
         assert (employee.salary != salaryInETH);
 
         uint lastSalary = employee.salary;

         uint lastSalary = employee.salary;
